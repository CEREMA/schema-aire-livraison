library(tidyverse)
library(jsonlite)
library(glue)
s <- read_json("../schema.json")
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
fields
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(inputFile, fields) {
f <- read.csv(inputFile, encoding = "UTF-8")
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df <- correctFile("../exemple-valide.csv", fields)
df <- correctFile("../../exemple-valide.csv", fields)
write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
fields
df <- correctFile("../../exemple-valide.csv", fields)
# write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
names(df)
df$VEH_MAX
df <- correctFile("../../exemple-valide.csv", fields)
# write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
names(df)
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
correctFile <- function(f, fields) {
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
# write.csv(df, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
names(df1)
names(df2)
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(f, fields) {
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
nrow(df1) == nrow(df2)
names(df1)
df1$VEH_TONNAGE
df2$VEH_TONNAGE
l <- list.files("../../exemples", "*.csv", full.names = T)
l
l <- list.files("../../exemples", "*.csv", full.names = T)
print(l)
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
df
names(df)
l
for(inputFile in l) {
message(">> file : ", inputFile)
df <- correctFile(inputFile, fields)
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
fields
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
names(df)
# write.csv(df, glue("{elt}-new.csv"), fileEncoding = "UTF-8", row.names = F, na = "")
# write.csv(df, elt, fileEncoding = "UTF-8", row.names = F, na = "")
}
write.csv(df2, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
nrow(df1) == nrow(df2)
write.csv(df2, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
names(df)
write.csv(df, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
l
inputFile <- l[[1]]
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df1
glimpse(df1)
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
inputFile = l[[1]]
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
df2$COLL_INSEE
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
library(tidyverse)
library(jsonlite)
library(glue)
s <- read_json("../../schema.json")
fields <- sapply(s$fields, function(elt) elt$name)
correctFile <- function(f, fields) {
df_l <- list()
# On parcourt chaque champ du schéma pour voir s'il existe ou non dans la donnée
# S'il n'existe pas, on le rajoute
for(field in fields) {
if(!(field %in% names(f))) {
message(">> ", field, " n'existe pas. On ne remplit à NA")
# Ajout de la colonne avec valeur NA
df_l[[field]] <- NA
} else {
# On prend la colonne précédente
df_l[[field]] <- f[[field]]
}
# Rajoute les 0 le cas échéant à COLL_INSEE
if(field == "COLL_INSEE") {
df_l[[field]] <- f[[field]] %>% str_pad(5, side = "left", pad = "0")
}
}
# On convertit la liste en data frame
df <- data.frame(df_l)
return(df)
}
df1 <- read.csv("../../exemple-valide.csv", encoding = "UTF-8")
df2 <- correctFile(df1, fields)
names(df2)
nrow(df1) == nrow(df2)
write.csv(df2, "../../exemple-valide.csv", fileEncoding = "UTF-8", row.names = F, na = "")
l <- list.files("../../exemples", "*.csv", full.names = T)
print(l)
for(inputFile in l) {
message(">> file : ", inputFile)
df1 <- read.csv(inputFile, encoding = "UTF-8")
df2 <- correctFile(df1, fields)
print(nrow(df1) == nrow(df2))
write.csv(df2, inputFile, fileEncoding = "UTF-8", row.names = F, na = "")
}
library(jsonlite)
library(jsonlite)
s1 <- read_json("../../schema.json")
s2 <- read_json("../../schema-ultra.json")
names(s1)
fields_s2 <- s2$fields
fields_s2
names(fields_s2)
fields <- s2$fields
fields
length(fields)
s1$fields <- c(s1$fields, fields)
length(s1$fields)
toJSON(s1, "../../test.json")
?toJSON
toJSON(s1, "../../test.json", "values")
toJSON(s1, "../../test.json", dataframe = "values")
toJSON(s1, "../../test.json", dataframe = "values", matrix = "rowmajor")
class(s1)
toJSON(s1)
js <- toJSON(s1)
js <- toJSON(s1)
write(js, "../../test.json")
library(jsonlite)
s1 <- read_json("../../schema.json")
s2 <- read_json("../../ultra.json")
fields <- s2$fields
s1$fields <- c(s1$fields, fields)
js <- toJSON(s1)
write(js, "../../schema-ultra.json")
class(js)
library(jsonlite)
s1 <- read_json("../../schema.json")
s2 <- read_json("../../ultra.json")
fields <- s2$fields
s1$fields <- c(s1$fields, fields)
js <- toJSON(s1, auto_unbox = T)
write(js, "../../schema-ultra.json")
s1$fields %>% length()
library(tidyverse)
s1$fields %>% length()
library(jsonlite)
library(tidyverse)
s1 <- read_json("../../schema.json")
s2 <- read_json("../../ultra.json")
length(s1$fields)
library(jsonlite)
library(tidyverse)
s1 <- read_json("../../schema.json")
s2 <- read_json("../../ultra.json")
length(s1$fields)
fields <- s2$fields
s1$fields <- c(s1$fields, fields)
js <- toJSON(s1, auto_unbox = T)
write(js, "../../schema-ultra.json")
sapply(s1$fields, function(x) elt$name)
sapply(s1$fields, function(x) x$name)
sapply(s1$fields, function(x) grepl("[Acteur économique]", x$title))
sapply(s1$fields, function(x) grepl("[Acteur économique]", x$title)) %>% which
sapply(s1$fields, function(x) grepl("[Acteur économique]", x$title))
s1$fields
sapply(s1$fields, function(x) x$title)
sapply(s1$fields, function(x) grepl("\\[Acteur économique\\]", x$title))
sapply(s1$fields, function(x) grepl("\\[Acteur économique\\]", x$title)) %>% which
sapply(s1$fields, function(x) grepl("\\[Acteur économique\\]", x$title)) %>% which -> w
sapply(s1$fields, function(x) x$name)[w]
library(jsonlite)
library(tidyverse)
s1 <- read_json("../../schema.json")
s2 <- read_json("../../ultra.json")
s1$fields$name
sapply(s1$fields, function(elt) elt$name)
paste(sapply(s1$fields, function(elt) elt$name), collapse="\n")
paste(sapply(s1$fields, function(elt) elt$name), collapse=", ")
paste(sapply(s2$fields, function(elt) elt$name), collapse=", ")
library(jsonlite)
library(tidyverse)
s1 <- read_json("../../schema.json")
s2 <- read_json("../../ultra.json")
paste(sapply(s1$fields, function(elt) elt$name), collapse=", ")
paste(sapply(s2$fields, function(elt) elt$name), collapse=", ")
length(s1$fields)
fields <- s2$fields
s3 <- s1
s3$fields <- c(s1$fields, fields)
js <- toJSON(s3, auto_unbox = T)
write(js, "../../schema-ultra.json")
sapply(s1$fields, function(x) grepl("\\[Acteur économique\\]", x$title)) %>% which -> w
sapply(s1$fields, function(x) x$name)[w] %>% paste(collapse, ", ")
w
sapply(s1$fields, function(x) grepl("\\[Acteur économique\\]", x$title)) %>% which -> w
sapply(s1$fields, function(x) x$name)[w] %>% paste(collapse = ", ")
sapply(s3$fields, function(x) grepl("\\[Acteur économique\\]", x$title)) %>% which -> w
sapply(s3$fields, function(x) x$name)[w] %>% paste(collapse = ", ")
length(s1$fields)
library(jsonlite)
library(tidyverse)
s1 <- read_json("../../schema.json")
s2 <- read_json("../../ultra.json")
length(s1$fields)
paste(sapply(s1$fields, function(elt) elt$name), collapse=", ")
paste(sapply(s2$fields, function(elt) elt$name), collapse=", ")
length(s1$fields)
fields <- s2$fields
s3 <- s1
s3$fields <- c(s1$fields, fields)
js <- toJSON(s3, auto_unbox = T)
write(js, "../../schema-ultra.json")
sapply(s3$fields, function(x) grepl("\\[Acteur économique\\]", x$title)) %>% which -> w
sapply(s3$fields, function(x) x$name)[w] %>% paste(collapse = ", ")
library(jsonlite)
library(tidyverse)
s1 <- read_json("../../schema.json")
s2 <- read_json("../../ultra.json")
length(s1$fields)
paste(sapply(s1$fields, function(elt) elt$name), collapse=", ")
paste(sapply(s2$fields, function(elt) elt$name), collapse=", ")
length(s1$fields)
fields <- s2$fields
s3 <- s1
s3$fields <- c(s1$fields, fields)
js <- toJSON(s3, auto_unbox = T)
write(js, "../../schema-ultra.json")
sapply(s3$fields, function(x) grepl("\\[Acteur économique\\]", x$title)) %>% which -> w
sapply(s3$fields, function(x) x$name)[w] %>% paste(collapse = ", ")
